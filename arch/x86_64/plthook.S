.globl plt_hooker
plt_hooker:
	.cfi_startproc
	/* PLT code already pushed symbol and module indices */
	.cfi_adjust_cfa_offset 16
    sub $56, %rsp
	.cfi_adjust_cfa_offset 56
	movq %rdi, 48(%rsp)
	.cfi_offset rdi, -24
	movq %rsi, 40(%rsp)
	.cfi_offset rsi, -32
	movq %rdx, 32(%rsp)
	.cfi_offset rdx, -40
	movq %rcx, 24(%rsp)
	.cfi_offset rcx, -48
	movq %r8, 16(%rsp)
	.cfi_offset r8, -56
	movq %r9, 8(%rsp)
	.cfi_offset r9, -64
	/* child idx */
	movq 64(%rsp), %rsi
	/* address of parent ip */
	lea 72(%rsp), %rdi
	/* module id */
	movq 56(%rsp), %rdx
	/* mcount_args */
	lea 8(%rsp), %rcx

	call plthook_entry

    movq 8(%rsp), %r9
	movq 16(%rsp), %r8
	movq 24(%rsp), %rcx
	movq 32(%rsp), %rdx
	movq 40(%rsp), %rsi
	movq 48(%rsp), %rdi
	add $56, %rsp
	.cfi_adjust_cfa_offset -56

	cmpq $0, %rax
	cmovz plthook_resolver_addr(%rip), %rax
	jz 1f

	add $16, %rsp /* resolver function needs 2 entries on stack */
	.cfi_adjust_cfa_offset -16
1:
	jmp *%rax
	.cfi_endproc
	
.type plt_hooker, @function
.size plt_hooker, .-plt_hooker
.hidden plthook_resolver_addr


.globl plthook_return
plthook_return:
	.cfi_startproc
	sub $24, %rsp
	.cfi_def_cfa_offset 24
	movq %rdx, 8(%rsp)
	.cfi_offset rdx, -16
	movq %rax, 0(%rsp)
	.cfi_offset rax, -24

	/* set the first argument of plthook_exit as pointer to return values */
	movq %rsp, %rdi

	call plthook_exit
	movq %rax, 16(%rsp)

	movq 0(%rsp), %rax
	movq 8(%rsp), %rdx
	add $16, %rsp
	.cfi_def_cfa_offset 8
	retq
	.cfi_endproc

.type plthook_return, @function
.size plthook_return, .-plthook_return
